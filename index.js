// 1. Створення базового об'єкту "Book":
/*
 * Об'єкт: Book
 * Властивості:
 * ----------------------------------
 * | Властивість | Значення         |
 * |-------------|------------------|
 * | title       | "Загальна Книга" |
 * | author      | "Анонім"         |
 * | pages       | 0                |
 *
 * Функції:
 * ------------------------------------------------------------------------
 * | Функція    | Опис                                                    |
 * -----------------------------------------------------------------------
 * | read()     | Виводить повідомлення "Ви читаєте <title> від <author>" |
 */

// Створюємо об'єкт Book
// Створюємо прототип Book
console.log("Завдання: 1 ==============================");

// Створюємо об'єкт Book
let Book = {
    title: "Загальна Книга",
    author: "Анонім",
    pages: 0,
    read: function() {
        console.log("Ви читаєте " + this.title + " від " + this.author);
    }
}

// Виводимо в консоль Об'єкт: Book
console.log(Book);

// Виводимо в консоль прототип Об'єкту: Book
console.log(Object.getPrototypeOf(Book) === Book)

// Викликаємо функцію read об'єкту Book
Book.read()

// 2. Наслідування від базового об'єкту Book

/*
 * Об'єкт: Novel
 * Властивості та функції наслідуються від об'єкта Book
 * Додаємо нову властивість
 *  | Властивість | Значення |
 *  |-------------|----------|
 *  | genre       | "Новела" |
 */

// Створюємо об'єкт Novel, наслідуємо властивості і функції від об'єкта Book
// class Novel extends Book {
//     constructor(title, author, pages, genre) {
//         super(title, author, pages);
//         this.genre = genre; // Нова властивість
// }
// }
// Додаємо властивість genre

console.log("Завдання: 2 ==============================");

// // Виводимо в консоль Об'єкт: Novel
// console.log("Об'єкт: ", Novel);
// // Виводимо в консоль прототип Об'єкту: Novel
// console.log("Прототип Об'єкту: ", Novel.prototype);

// Створення нового об'єкту Novel з наслідуванням від об'єкта Book
let Novel = Object.create(Book);

// Додавання нової властивості до об'єкта Novel
Novel.genre = "Новела";

// Виведення об'єкта Novel у консоль
console.log(Novel);

// Виводимо в консоль прототип Об'єкту: Novel
console.log(Object.getPrototypeOf(Novel));

// 3. Створення нового об'єкту та зміна його прототипу

/*
 * Об'єкт: Biography
 * Властивості:
 * --------------------------------------
 * | Властивість | Значення             |
 * |-------------|----------------------|
 * | title       | "Загальна Біографія" |
 * | author      | "Біограф"            |
 * | pages       | 200                  |
 */

// Створюємо об'єкт Biography
let Biography = {
    title: "Загальна Біографія",
    author: "Біограф",
    pages: 200
};
// Змінемо прототип об'єкта Biography на Novel
Object.setPrototypeOf(Biography, Novel);


console.log("Завдання: 3 ==============================");
// Виводимо в консоль Об'єкт: Biography
console.log(Biography);
// Перевіримо чи являється Novel прототипом Biography та виведемо в консоль
console.log(Object.getPrototypeOf(Biography) === Novel);
// 4. Інкапсуляція властивості та додання властивості
/*
 * Об'єкт: ScienceBook
 * Властивості та функції наслідуються від об'єкта Book
 * Також тут використовується інкапсуляція для створення властивості 'info', яка не може бути змінена напряму, а лише змінюється за допомогю гетера
 */

// Створюємо ScienceBook, наслідуємо властивості і функції від об'єкта Book
let ScienceBook = Object.create(Book);

// Додаємо властивість 'info' за допомогою Object.defineProperty
// Зробимо щоб 'info' не можно було видалити або змінити, перевіримо і спробуємо присвоїти ій будь яке значення (це потрібно робити ззовні defineProperty),
Object.defineProperty(ScienceBook, 'info', {
    value: "написана в 1915 році",
    enumerable: false, // Властивість не може бути змінена
    configurable: false // Неможливо видалити властивість або змінити її налаштування
});
//ScienceBook.info = "123";
// Отримаємо помилку Cannot assign to read only property 'info' of object '#<Object>'

// Далі створюємо сетер який присвоє властивості info значення яке отримує при виклику, помилку більше не отримуємо але при спробі вивести значення info отримуємо undefined
// Створення сетера для властивості 'info'

//console.log(ScienceBook.Info); 
// Створимо гетер який буде нам повертати рядок: Про книгу <title>: <info>
Object.defineProperty(ScienceBook, 'Info', {
    set: function(value) {
    this.info = value;
    },
    get: function() {
        return "Про книгу " + this.title + ": " + this.info;
        }
});

// тепер все виводить коректно

// Заповнюємо об'єкт
// | Властивість | Значення             |
// |-------------|----------------------|
// | title       | "Фізика 101"         |
// | author      | "Альберт Ейнштейн"   |
// | info        | написана в 1915 році |
ScienceBook.title = "Фізика 101";
ScienceBook.author = "Альберт Ейнштейн";
// ScienceBook.info = "написана в 1915 році";

console.log("Завдання: 4 ==============================");
// Виводимо в консоль властивість info
console.log(ScienceBook.Info); 
// Виводимо в консоль налаштування властивости info
console.log(Object.getOwnPropertyDescriptor(ScienceBook, 'Info'));
// 5. Поліморфізм: створення нового об'єкта та перевизначення його методу
/*
 * Об'єкт: Textbook
 * Властивості та функції наслідуються від об'єкта ScienceBook
 * Метод read() перевизначено для демонстрації поліморфізму,
 * має виводити "Ви читаєте підручник "<title>" від <author>. <info>"
 */

//Створюємо Textbook та наслідуємо властивості з ScienceBook
let Textbook = Object.create(ScienceBook);

// Перевизначення методу read() для об'єкту Textbook
Textbook.read = function() {
    console.log("Ви читаєте підручник '" + this.title + "' від " + this.author + ". " + this.Info);
};

// Встановлюємо значення для Textbook
// | Властивість | Значення                   |
// |-------------|----------------------------|
// | title       | "Фізика у Вищій Школі"     |
// | author      | "Дж. Д. Джонс"             |
// Встановлення значень для об'єкта Textbook
Textbook.title = "Фізика у Вищій Школі";
Textbook.author = "Дж. Д. Джонс";
console.log("Завдання: 5 ==============================");
// Викликаємо функцію read об'єкту Textbook
Textbook.read();
// 6. Абстракція: створення об'єкта з загальними властивостями
/*
 * Об'єкт: Media
 * Властивості:
 * --------------
 * | Властивість | Значення           |
 * |-------------|--------------------|
 * | format      | "Загальний Формат" |
 * | length      | 0                  |
 *
 * Функції:
 * ---------------------------------------------------------------------------------------------------------------
 * | Функція | Опис                                                                                              |
 * |---------|---------------------------------------------------------------------------------------------------|
 * | play()  | Виводить повідомлення "Зараз відтворюється медіа у форматі <format> з тривалістю <length> секунд" |
 */

// Створюємо об'єкт Media
class Media {
    constructor() {
    this.format = "Загальний Формат";
    this.length = 0;
    }

    play() {
    console.log(`Зараз відтворюється медіа у форматі ${this.format} з тривалістю ${this.length} секунд`);
    }
}
/*
 * Об'єкт: Song
 * Властивості та функції наслідуються від об'єкта Media
 * Додаткові властивості: artist, title
 */

// Створюємо об'єкт Song, наслідуємо властивості і функції від об'єкта Media
class Song extends Media {
    constructor(artist, title) {
    super();
    this.artist = artist;
    this.title = title;
    }
}
// Встановлюємо додаткові властивості
// | Властивість | Значення               |
// |-------------|------------------------|
// | artist      | "Загальний Виконавець" |
// | title       | "Загальна Пісня"       |

let mySong = new Song("Загальний Виконавець", "Загальна Пісня");

console.log("Завдання: 6 ==============================");
// Викликаємо функцію play об'єкту Song
mySong.play();